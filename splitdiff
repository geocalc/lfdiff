#!/usr/bin/perl

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.



use warnings;
use strict;
use Getopt::Std;
use Fcntl qw(:seek);

# Algorithmus:
# 1)
# Split INPUT1 und INPUT2 auf ganze Zeilen von insgesamt $splitsize Dateigröße.
# Erzeuge eine Diffausgabe auf die Splits.
# Analysiere die Diffausgabe.
# Übernehme alle Diffs aus der Ausgabedatei und setze den Start für den
# nächsten Split auf die jeweils letzte Diffzeile von INPUT1 und INPUT2.
# Wenn der Diff an der letzten Zeile der Diffausgabe endet, schneide den
# letzten Diff aus der Ausgabe heraus und speichere alle übrigen Diffs. In dem
# Fall setze den Start für den nächsten Split auf die letzte Zeile des
# vorletzen Diffs.
# Gehe zu 1)
# Prüfe die Ausgabe, indem aus INPUT1 und Diff eine Datei erzeugt wird, die mit
# INPUT2 identisch ist.






#-------- constants --------
my $splitsize = 10_000;#(2*1024*1024*1024); #2GiB
my $dodebug = 0;
#------- /constants --------

my $beverbose;

sub printerr
{
  print STDERR "@_";
}

sub printverb
{
    printerr @_ if defined $beverbose and $beverbose != 0;
}

sub debug
{
    printerr @_ if defined $dodebug and $dodebug != 0;
}

sub usage {
  printerr <<EOL;
usage:
lfdiff [-h] [-v] [-f] [-o OUTPUT] INPUT1 INPUT2
\t-o: write output to OUTFILE instead of stdout
\t-v: be verbose
\t-h: print usage
EOL
}

sub errorexit {
  printerr @_;
  usage;
  exit 1;
}

sub dump_array {
    if (defined $dodebug and $dodebug != 0) {
        my $arrayref = shift;

        for (my $i=0; $i < $#{$arrayref}; $i++) {
            my $line = defined $arrayref->[$i]? "'$arrayref->[$i]'": "undefined";
            printerr "$i: $line\n";
        }
    }
}


my %args;
#$Getopt::Std::STANDARD_HELP_VERSION = 1;
if (getopts( 'ho:v', \%args )) {
#  errorexit "error parsing commandline\n";
}

if (defined $args{h} and $args{h} ne '') {
    usage();
    exit 0;
}

my $filename = $args{o};
if (defined $filename) {
  # redirect STDOUT to file
  open (STDOUT, ">", $filename) or die "Unable to open file '$filename': $!";
}

$beverbose = $args{v};

if ($#ARGV+1 < 2) {
    errorexit "error: missing input files\n";
}

my $fileA = $ARGV[0];
my $fileB = $ARGV[1];


my $linesA = 0;
my $linesB = 0;

my $cmdline;

my $tmpfile = "/tmp/splitdiff.$$.tmp";
open(TMPFILE, "+>", $tmpfile) or die "Unable to open file '$tmpfile': $!";

# get the number of splittings of the input files
my $filesize = -s $fileA;
$filesize = -s $fileB if -s $fileB > $filesize;
my $max_i = int($filesize / $splitsize) +1;

for (my $i=1; $i<= $max_i; $i++) {

    $cmdline = "split -n l/$i/$max_i $fileA | wc -l";
    open(WCINPUT, "-|", $cmdline) or die "Unable to call '$cmdline': $!";
    my $maxlinesA = int(<WCINPUT>);
    close (WCINPUT);
    #printerr "File A, split $i, lines $maxlinesA\n";

    $cmdline = "split -n l/$i/$max_i $fileB | wc -l";
    open(WCINPUT, "-|", $cmdline) or die "Unable to call '$cmdline': $!";
    my $maxlinesB = int(<WCINPUT>);
    close (WCINPUT);
    #printerr "File B, split $i, lines $maxlinesB\n";

    # only bash can use input input pipe substitution
    $cmdline = "bash -c \"diff <(split -n l/$i/$max_i $fileA) <(split -n l/$i/$max_i $fileB)\"";
    open (DIFFINPUT, "-|", $cmdline) or die "Unable to call '$cmdline': $!";
    while (<DIFFINPUT>) {
    #    print $_;
        if ($_ =~ m/^(\d+),?(\d*)([acd])(\d+),?(\d*)$/) {
            if (defined $dodebug and $dodebug != 0) {
                if ($3 eq 'a') {
                    printerr "added lines from $1".($2?" to $2":'').", into $4".($5?" to $5":'')."\n";
                }
                elsif ($3 eq 'c') {
                    printerr "changed lines from $1".($2?" to $2":'').", into $4".($5?" to $5":'')."\n";
                }
                elsif ($3 eq 'd') {
                    printerr "deleted lines from $1".($2?" to $2":'').", into $4".($5?" to $5":'')."\n";
                }
            }
            # add line number of previous runs onto line number from diff
            print TMPFILE ''.($1+$linesA).($2?",".($2+$linesA):'').$3.($4+$linesB).($5?",".($5+$linesB):'')."\n";
        }
        else {
            print TMPFILE;
        }
    }
    close (DIFFINPUT);

    $linesA += $maxlinesA;
    $linesB += $maxlinesB;

}

# startover at beginning
seek TMPFILE, 0, SEEK_SET;

my @virtual_file_a;
my @virtual_file_b;
$linesA = 0;
$linesB = 0;
my @AlinkB;
my @BlinkA;
while (<TMPFILE>) {
    debug $_;
    if ($_ =~ m/^(\d+),?(\d*)([acd])(\d+),?(\d*)$/) {
        if ($3 eq 'a') {
            printverb "added lines from $1".($2?" to $2":'').", into $4".($5?" to $5":'')."\n";
            $linesA=$1;
            $linesB=$4;
            @AlinkB[$linesA]=$linesB;
            @BlinkA[$linesB]=$linesA;
        }
        elsif ($3 eq 'c') {
            printverb "changed lines from $1".($2?" to $2":'').", into $4".($5?" to $5":'')."\n";
            $linesA=$1;
            $linesB=$4;
            @AlinkB[$linesA]=$linesB;
            @BlinkA[$linesB]=$linesA;
        }
        elsif ($3 eq 'd') {
            printverb "deleted lines from $1".($2?" to $2":'').", into $4".($5?" to $5":'')."\n";
            $linesA=$1;
            $linesB=$4;
            @AlinkB[$linesA]=$linesB;
            @BlinkA[$linesB]=$linesA;
        }
    }
    elsif ($_ =~ m/^\<(.*)$/) {
        $virtual_file_a[$linesA]=$1;
        $linesA++;
    }
    elsif ($_ =~ m/^\>(.*)$/) {
        $virtual_file_b[$linesB]=$1;
        $linesB++;
    }
    elsif ($_ =~ m/^\-\-\-$/) {
        # do nothing
    }
    else {
        die "can not parse line '$_'";
    }
}

debug "virtual file A:\n";
dump_array \@virtual_file_a;
debug "virtual file B:\n";
dump_array \@virtual_file_b;

close TMPFILE;
unlink $tmpfile;

# remove double entries


# print out the diff

$linesA = 1;
$linesB = 1;

while ($linesA <= $#virtual_file_a or $linesB <= $#virtual_file_b) {
    if (defined $virtual_file_a[$linesA] and defined $virtual_file_b[$linesB]) {
        # change lines from fileA to fileB

        my $diffstartA = $linesA;
        my $diffstartB = $linesB;
        # look for the end of the diff
        my $diffendA = $linesA;
        my $diffendB = $linesB;
        while (defined $virtual_file_a[++$diffendA]) {}
        while (defined $virtual_file_b[++$diffendB]) {}
        $diffendA--;
        $diffendB--;
        print "$diffstartA".($diffstartA != $diffendA?",$diffendA":"")."c${diffstartB}".($diffstartB != $diffendB?",$diffendB":"")."\n";
        foreach my $linenr ($diffstartA..$diffendA) {
            print "<$virtual_file_a[$linenr]\n";
        }
        print "---\n";
        foreach my $linenr ($diffstartB..$diffendB) {
            print ">$virtual_file_b[$linenr]\n";
        }
        $linesA = $diffendA;
        $linesB = $diffendB;
    }
    elsif (defined $virtual_file_a[$linesA]) {
        # delete lines from fileA

        my $diffstartA = $linesA;
        # look for the end of the diff
        my $diffendA = $linesA;
        while (defined $virtual_file_a[++$diffendA]) {}
        $diffendA--;
        $linesB--;
        print "$diffstartA".($diffstartA != $diffendA?",$diffendA":"")."d${linesB}\n";
        foreach my $linenr ($diffstartA..$diffendA) {
            print "<$virtual_file_a[$linenr]\n";
        }
        $linesA = $diffendA;
    }
    elsif (defined $virtual_file_b[$linesB]) {
        # add lines to fileB

        my $diffstartB = $linesB;
        # look for the end of the diff
        my $diffendB = $linesB;
        while (defined $virtual_file_b[++$diffendB]) {}
        $diffendB--;
        $linesA--;
        print "${linesA}a${diffstartB}".($diffstartB != $diffendB?",$diffendB":"")."\n";
        foreach my $linenr ($diffstartB..$diffendB) {
            print ">$virtual_file_b[$linenr]\n";
        }
        $linesB = $diffendB;
    }
    else {
        # both lines undefined (i.e. same)
    }
    $linesA++;
    $linesB++;
}


