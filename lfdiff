#!/usr/bin/perl

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.



use warnings;
use strict;
use Getopt::Std;
use Fcntl qw(SEEK_SET SEEK_CUR SEEK_END O_RDONLY); #SEEK_SET=0 SEEK_CUR=1 ...
use Text::Diff;
use Tie::File;


#-------- constants --------
my $mem_cache = (2*1024*1024*1024); #2GB
#------- /constants --------

my $beverbose;

sub printerr
{
  print STDERR "@_";
}

sub printverb
{
    printerr @_ if defined $beverbose and $beverbose != 0;
}

sub usage {
  printerr <<EOL;
usage:
lfdiff [-h] [-v] [-f] [-o OUTPUT] INPUT1 INPUT2
\t-f: force overwriting
\t-o: write output to OUTFILE instead of stdout
\t-v: be verbose
\t-h: print usage
EOL
}

sub errorexit {
  printerr @_;
  usage;
  exit 1;
}



my %args;
#$Getopt::Std::STANDARD_HELP_VERSION = 1;
if (getopts( 'ho:vf', \%args )) {
#  errorexit "error parsing commandline\n";
}

if (defined $args{h} and $args{h} ne '') {
    usage();
    exit 0;
}

my $useforce = $args{f};
my $filename = $args{o};
if (defined $filename) {
    # redirect STDOUT to file
    if (not open (STDOUT, ">", $filename)) {
        if (defined $useforce) {
            unlink $filename or die "Can not remove '$filename': $!";
            open (STDOUT, ">", $filename) or die "Unable to open file '$filename': $!";
        }
        else {
            die "Unable to open file '$filename': $!";
        }
    }
}


$beverbose = $args{v};

if ($#ARGV+1 < 2) {
    errorexit "error: missing input files\n";
}

my $fileA = $ARGV[0];
my $fileB = $ARGV[1];

if ($fileA eq $fileB) {
    errorexit "error: input files are same\n";
}


my @array_a;
my @array_b;
tie @array_a, 'Tie::File', $fileA, autochomp => 0, mode => O_RDONLY, memory => $mem_cache or die "error: could not open file '$fileA': $!";
tie @array_b, 'Tie::File', $fileB, autochomp => 0, mode => O_RDONLY, memory => $mem_cache or die "error: could not open file '$fileB': $!";
#, autochomp => 0
#, mode => O_RDONLY
#, memory => 20_000_000

printverb "diffing '$fileA' and '$fileB'".(defined $filename?" into '$filename'":'')."\n";
my $diff = diff \@array_a,  \@array_b, { STYLE => "OldStyle", OUTPUT => \*STDOUT };


